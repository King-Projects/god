#!/system/bin/sh
# Game Optimization Daemonâ„¢ by pedro (pedrozzz0 @ GitHub)
# Thanks to tytydraco @ GitHub
# If you wanna use it as part of your project, please maintain the credits to it respective's author(s).

# For debug purposes
[[ "$1" == "--debug" ]] || [[ "$1" == "-d" ]] && set -x

# Paths
modpath="/data/adb/modules/god"
glog="/data/media/0/ktsr/game_opt.txt"
cpid="/data/media/0/ktsr/pid"
gcfg="/data/media/0/ktsr/game_config.txt"
bbn_log="/data/media/0/ktsr/bourbon.txt"
gpu_tune_enable="/data/media/0/ktsr/enable_gpu_tune.txt"
notif_enable="/data/media/0/ktsr/enable_notif.txt"
gpu_tune="/data/media/0/ktsr/gpu_tune"

[[ "$(cat "$gpu_tune_enable")" == "1" ]] && enable_gpu_tune=1 || enable_gpu_tune=0

[[ "$(cat "$notif_enable")" == "1" ]] && enable_notif=1 || enable_notif=0

# Tasks
uni_task="UnityMain|UnityGfxDeviceW|Apollo-Source|Apollo-File"
uni_coop_task="UnityPreload|ace_worker|NativeThread|Thread-|UnityMultiRende|AsyncReadManage|UnityChoreograp|Worker Thread|CoreThread"
etc_task="MIHOYO_NETWORK|Audio|tp_schedule|GVoice|FMOD mixer|FMOD stream|ff_read|Jit thread pool|HeapTaskDaemon|FinalizerDaemon|ReferenceQueueD"
render_task="GameThread|Thread-|GLThread|RenderThread"
render_coop_task="NativeThread|SDLThread|RHIThread|TaskGraphNP|MainThread-UE4"

# Games
list_uni="com.dts.freefire|com.riotgames.|com.tencent.game.|com.tencent.lolm|com.tencent.tmgp.|com.mobile.legends|com.miHoYo.|com.ngame.allstar.eu|com.garena.game.|callofduty.shooter|com.axlebolt.standoff|flightsimulator|com.madfingergames.|com.carxtech.|DriftRacing|omin.protectors|com.sozap.|com.panzerdog.|com.netease.ddsfna|cade.next.mrglo|c.project_drift|headedshark.tco|com.tiramisu.|com.infinityvector.assolutoracing|com.nekki.shadowfight3|ite.sgameGlobal|com.gaijin.xom"
list_etc="com.StudioFurukawa.|com.dts.freefire|com.riotgames.|com.tencent.game.|com.tencent.lolm|com.tencent.tmgp.|com.mobile.legends|com.miHoYo.|com.ngame.allstar.eu|com.garena.game.|callofduty.shooter|com.axlebolt.standoff|com.supercell.brawlstars|com.firsttouchgames.dls|flightsimulator|ent.criticalops|com.gamedevltd.|com.madfingergames.|com.carxtech.|DriftRacing|omin.protectors|com.sozap.|com.panzerdog.|com.netease.ddsfna|cade.next.mrglo|c.project_drift|headedshark.tco|com.tiramisu.|com.tencent.ig|com.netease.jddsaef|com.netease.g93na|com.netease.g93natw|apexlegendsmobile|com.pubg.imobile|com.netease.mrzhna|hotta.|dw.h5yvzr.yt|n.c1game.naslim|.assolutoracing|squareenix.lis|walkingdead|com.nekki.shadowfight3|ite.sgameGlobal|com.gaijin.xom"
list_render="com.StudioFurukawa.|com.tencent.mf.uam|com.tencent.tmgp.|com.tencent.ig|com.netease.jddsaef|com.netease.g93na|apexlegendsmobile|com.pubg.imobile|com.netease.mrzhna|hotta.|dw.h5yvzr.yt|com.roblox.client|com.supercell.brawlstars|com.touchgames.dls|ent.criticalops|com.gamedevltd.|n.c1game.naslim|squareenix.lis|walkingdead|ting.action.pvp"
list_unified="com.StudioFurukawa.|com.tencent.mf.uam|com.gaijin.xom|ting.action.pvp|ite.sgameGlobal|com.dts.freefire|squareenix.lis|com.nekki.shadowfight3|walkingdead|headedshark.tco|com.tiramisu.|com.infinityvector.assolutoracing|n.c1game.naslim|com.gamedevltd.|com.madfingergames.|cade.next.mrglo|com.netease.ddsfna|com.carxtech.|DriftRacing|omin.protectors|com.sozap.|com.panzerdog.|com.firsttouchgames.dls|ent.criticalops|flightsimulator|com.riotgames.|com.garena.game.|com.tencent.lolm|com.tencent.tmgp.|com.mobile.legends|com.tencent.tmgp.|com.miHoYo.|com.ngame.allstar.eu|callofdutyshooter|com.axlebolt.standoff|com.tencent.ig|com.netease.jddsaef|com.netease.g93na|apexlegendsmobile|com.pubg.imobile|com.netease.mrzhna|hotta.|dw.h5yvzr.yt|com.roblox.client|com.supercell.brawlstars"

while IFS= read -r line || [[ -n "$line" ]]; do
	game=$(echo "$line" | awk '!/#/')
	list_uni+="|"$game
	list_etc+="|"$game
	list_render+="|"$game
	list_unified+="|"$game
done < "$gcfg"

# Filter
list_unified_filter="grep -Eo $list_unified"
ps_ret_filter_1="awk !/bindfs/"
ps_ret_filter_2="awk !/com.tencent.soter.soterserver/"
line_row_filter="tail -1"
package_filter="cut -f 2 -d ":""

notif_start() { su -lp 2000 -c "cmd notification post -S bigtext -t 'GOD is executing' tag 'Optimizing $game threads...'" >/dev/null 2>&1; }

notif_end() { su -lp 2000 -c "cmd notification post -S bigtext -t 'GOD is executing' tag 'Optimization done!'" >/dev/null 2>&1; }

log_g() { echo "[$(date +%T)]: [*] $1" >>"$glog"; }

log_i() { echo "$1" >"$glog"; }

log_e() { echo "[$(date +'%Y-%m-%d %T')]: [!] $1" >>"$glog"; }

write() {
	# Bail out if file does not exist
	[[ ! -f "$1" ]] && return 1

	# Make file writable in case it is not already
	chmod +w "$1" 2>/dev/null

	# Write the new value and bail if an error is present
	! echo "$2" >"$1" 2>/dev/null && return 1
}

[[ -d "/data/adb/modules/KTSR/" ]] && {
	log_e "KTSR found, exiting..."
	exit 1
}

[[ -d "/sys/class/kgsl/kgsl-3d0/" ]] && {
	gpu="/sys/class/kgsl/kgsl-3d0/"
	qcom=true
	gpu_num_pl=$(cat "${gpu}num_pwrlevels")
	gpu_min_pl=$((gpu_num_pl - 1))
}

for gpul2 in /sys/devices/*.mali/; do
	[[ -d "$gpul2" ]] && {
		gpu="$gpul2"
		qcom=false
	}
done

for gpul3 in /sys/devices/platform/*.gpu/; do
	[[ -d "$gpul3" ]] && {
		gpu="$gpul3"
		qcom=false
	}
done

for gpul4 in /sys/devices/platform/mali-*/; do
	[[ -d "$gpul4" ]] && {
		gpu="$gpul4"
		qcom=false
	}
done

for gpul5 in /sys/devices/platform/*.mali/; do
	[[ -d "$gpul5" ]] && {
		gpu="$gpul5"
		qcom=false
	}
done

for gpul6 in /sys/class/misc/mali*/device/devfreq/gpufreq/; do
	[[ -d "$gpul6" ]] && {
		gpu="$gpul6"
		qcom=false
	}
done

for gpul7 in /sys/class/misc/mali*/device/devfreq/*.gpu/; do
	[[ -d "$gpul7" ]] && {
		gpu="$gpul7"
		qcom=false
	}
done

for gpul8 in /sys/devices/platform/*.mali/misc/mali0/; do
	[[ -d "$gpul8" ]] && {
		gpu="$gpul8"
		qcom=false
	}
done

for gpul9 in /sys/devices/platform/mali.*/; do
	[[ -d "$gpul9" ]] && {
		gpu="$gpul9"
		qcom=false
	}
done

for gpul10 in /sys/devices/platform/*.mali/devfreq/*.mali/subsystem/*.mali; do
	[[ -d "$gpul10" ]] && {
		gpu="$gpul10"
		qcom=false
	}
done

for gpul11 in /sys/class/misc/mali*/device/; do
	[[ -d "$gpul11" ]] && {
		gpu="$gpul11"
		qcom=false
	}
done

# $1:task_name $2:cgroup_name $3:"cpuset"/"stune"
change_task_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			echo "$temp_tid" >"/dev/$3/$2/tasks"
		done
	done
}

# $1:process_name $2:cgroup_name $3:"cpuset"/"stune"
change_proc_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		comm="$(cat "/proc/$temp_pid/comm")"
		echo "$temp_pid" >"/dev/$3/$2/cgroup.procs"
	done
}

# $1:task_name $2:thread_name $3:cgroup_name $4:"cpuset"/"stune"
change_thread_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && echo "$temp_tid" >"/dev/$4/$3/tasks"
		done
	done
}

# $1:task_name $2:cgroup_name $3:"cpuset"/"stune"
change_main_thread_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		comm="$(cat "/proc/$temp_pid/comm")"
		echo "$temp_pid" >"/dev/$3/$2/tasks"
	done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_task_affinity() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			taskset -p "$2" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:thread_name $3:hex_mask(0x00000003 is CPU0 and CPU1)
change_thread_affinity() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && taskset -p "$3" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_other_thread_affinity() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls /proc/"$temp_pid"/task/); do
			comm="$(cat /proc/"$temp_pid"/task/*/comm)"
			[[ ! "$uni_task" == "$comm" ]] && [[ ! "$uni_task2" == "$comm" ]] && [[ ! "$etc_task" == "$comm" ]] && [[ ! "$render_task" == "$comm" ]] && [[ ! "$render_task2" == "$comm" ]] && taskset -p "$2" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:nice(relative to 120)
change_task_nice() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			renice -n +40 -p "$temp_tid"
			renice -n -19 -p "$temp_tid"
			renice -n "$2" -p "$temp_tid"
		done
	done
}

# $1:task_name $2:thread_name $3:nice(relative to 120)
change_thread_nice() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && {
				renice -n +40 -p "$temp_tid"
				renice -n -19 -p "$temp_tid"
				renice -n "$3" -p "$temp_tid"
			}
		done
	done
}

# $1:task_name $2:priority(99-x, 1<=x<=99) (SCHED_RR)
change_task_rt() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			chrt -p "$temp_tid" "$2" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:priority(99-x, 1<=x<=99) (SCHED_FIFO)
change_task_rt_ff() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			chrt -f -p "$temp_tid" "$2" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:thread_name $3:priority(99-x, 1<=x<=99)
change_thread_rt() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && chrt -p "$3" "$temp_tid" >>"$bbn_log"
		done
	done
}

unpin_thread() { change_thread_cgroup "$1" "$2" "" "cpuset"; }

# 0-3
pin_thread_on_pwr() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "0f"
}

# 0-5
pin_thread_on_mid() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "3f"
}

# 0-6
pin_thread_on_foreg() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "3f"
}

# 4-7
pin_thread_on_perf() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "f0"
}

# 0-7
pin_thread_on_all() {
	unpin_proc "$1"
	change_task_affinity "$1" "ff"
}

# $1:task_name $2:thread_name $3:hex_mask
pin_thread_on_custom() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "$3"
}

# $1:task_name $2:hex_mask
pin_other_thread_on_custom() {
	unpin_thread "$1" "$2"
	change_other_thread_affinity "$1" "$2"
}

# $1:task_name
unpin_proc() { change_task_cgroup "$1" "" "cpuset"; }

# 0-3
pin_proc_on_pwr() {
	unpin_proc "$1"
	change_task_affinity "$1" "0f"
}

# 0-5
pin_proc_on_mid() {
	unpin_proc "$1"
	change_task_affinity "$1" "3f"
}

# 0-6
pin_proc_on_foreg() { 
	unpin_proc "$1"
	change_task_affinity "$1" "7f"
}

# 4-7
pin_proc_on_perf() {
	unpin_proc "$1"
	change_task_affinity "$1" "f0"
}

# 0-7
pin_proc_on_all() {
	unpin_proc "$1"
	change_task_affinity "$1" "ff"
}

# $1:task_name $2:hex_mask
pin_proc_on_custom() {
	unpin_proc "$1"
	change_task_affinity "$1" "$2"
}

rebuild_ps_cache() { ps_ret="$(ps -Ao pid,args | $ps_ret_filter_1 | $ps_ret_filter_2)"; }

gameopt_apply() {
	rebuild_ps_cache
	change_thread_affinity "$list_uni" "$uni_task" "f0"
	change_thread_affinity "$list_uni" "$uni_coop_task" "7f"
	change_thread_affinity "$list_etc" "$etc_task" "0f"
	change_other_thread_affinity "$list_uni" "ff"
	change_thread_affinity "$list_render" "$render_task" "f0"
	change_thread_affinity "$list_render" "$render_coop_task" "7f"
	change_other_thread_affinity "$list_render" "3f"
}

gpu_tune_apply() {
	[[ "$qcom" == "true" ]] && {
		write "${gpu}throttling" "0"
		write "${gpu}thermal_pwrlevel" "0"
		write "${gpu}devfreq/adrenoboost" "0"
		write "${gpu}bus_split" "0"
		write "${gpu}min_pwrlevel" "0"
		write "${gpu}force_no_nap" "1"
		write "${gpu}force_bus_on" "1"
		write "${gpu}force_clk_on" "1"
		write "${gpu}force_rail_on" "1"
		write "${gpu}popp" "0"
		write "${gpu}pwrnap" "0"
		write "/sys/kernel/debug/sde_rotator0/clk_always_on" "1"
		[[ -d "/sys/module/simple_gpu_algorithm/" ]] && write "/sys/module/simple_gpu_algorithm/parameters/simple_gpu_activate" "0"
		log_g "Tuning GPU performance..."
		echo "" >>"$glog"
		echo "1" >"$gpu_tune"
	} || {
		write "${gpu}dvfs" "0"
		write "${gpu}highspeed_load" "76"
		write "${gpu}highspeed_delay" "0"
		write "${gpu}power_policy" "always_on"
		write "${gpu}cl_boost_disable" "0"
		write "${gpu}tmu" "0"

		[[ -d "/sys/module/ged/" ]] && {
			write "/sys/module/ged/parameters/ged_boost_enable" "1"
			write "/sys/module/ged/parameters/boost_gpu_enable" "1"
			write "/sys/module/ged/parameters/boost_extra" "1"
			write "/sys/module/ged/parameters/enable_cpu_boost" "1"
			write "/sys/module/ged/parameters/enable_gpu_boost" "1"
			write "/sys/module/ged/parameters/enable_game_self_frc_detect" "1"
			write "/sys/module/ged/parameters/ged_force_mdp_enable" "1"
			write "/sys/module/ged/parameters/ged_log_perf_trace_enable" "0"
			write "/sys/module/ged/parameters/ged_log_trace_enable" "0"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_debug" "0"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_disable" "1"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_systrace" "0"
			write "/sys/module/ged/parameters/ged_smart_boost" "0"
			write "/sys/module/ged/parameters/gpu_debug_enable" "0"
			write "/sys/module/ged/parameters/gpu_dvfs_enable" "0"
			write "/sys/module/ged/parameters/gx_3D_benchmark_on" "1"
			write "/sys/module/ged/parameters/gx_force_cpu_boost" "1"
			write "/sys/module/ged/parameters/gx_frc_mode" "1"
			write "/sys/module/ged/parameters/gx_game_mode" "1"
			write "/sys/module/ged/parameters/is_GED_KPI_enabled" "1"
			write "/sys/module/ged/parameters/boost_amp" "1"
			write "/sys/module/ged/parameters/gx_boost_on" "1"
			write "/sys/module/ged/parameters/gpu_idle" "0"
			write "/sys/module/ged/parameters/gpu_cust_boost_freq" "0"
		}

		[[ -d "/proc/gpufreq/" ]] && {
			write "/proc/gpufreq/gpufreq_opp_stress_test" "1"
			write "/proc/gpufreq/gpufreq_input_boost" "0"
			write "/proc/gpufreq/gpufreq_limited_thermal_ignore" "1"
			write "/proc/gpufreq/gpufreq_limited_oc_ignore" "1"
			write "/proc/gpufreq/gpufreq_limited_low_batt_volume_ignore" "1"
			write "/proc/gpufreq/gpufreq_limited_low_batt_volt_ignore" "1"
		}

		[[ -d "/sys/kernel/ged/" ]] && write "/sys/kernel/ged/hal/dcs_mode" "0"

		[[ -d "/proc/mali/" ]] && {
			write "/proc/mali/dvfs_enable" "0"
			write "/proc/mali/always_on" "1"
		}
		log_g "Tuning GPU performance..."
		echo "" >>"$glog"
		echo "1" >"$gpu_tune"
	}
}

gpu_tune_default() {
	[[ "$qcom" == "true" ]] && {
		write "${gpu}throttling" "0"
		write "${gpu}thermal_pwrlevel" "0"
		write "${gpu}devfreq/adrenoboost" "0"
		write "${gpu}bus_split" "1"
		write "${gpu}min_pwrlevel" "$gpu_min_pl"
		write "${gpu}force_no_nap" "0"
		write "${gpu}force_bus_on" "0"
		write "${gpu}force_clk_on" "0"
		write "${gpu}force_rail_on" "0"
		write "${gpu}popp" "0"
		write "${gpu}pwrnap" "1"
		write "/sys/kernel/debug/sde_rotator0/clk_always_on" "0"
		echo "0" >"$gpu_tune"
	} || {
		write "${gpu}dvfs" "1"
		write "${gpu}highspeed_load" "79"
		write "${gpu}highspeed_delay" "0"
		write "${gpu}power_policy" "coarse_demand"
		write "${gpu}tmu" "1"

		[[ -d "/sys/module/ged/" ]] && {
			write "/sys/module/ged/parameters/ged_boost_enable" "0"
			write "/sys/module/ged/parameters/boost_gpu_enable" "0"
			write "/sys/module/ged/parameters/boost_extra" "0"
			write "/sys/module/ged/parameters/enable_cpu_boost" "0"
			write "/sys/module/ged/parameters/enable_gpu_boost" "0"
			write "/sys/module/ged/parameters/enable_game_self_frc_detect" "0"
			write "/sys/module/ged/parameters/ged_force_mdp_enable" "0"
			write "/sys/module/ged/parameters/ged_log_perf_trace_enable" "0"
			write "/sys/module/ged/parameters/ged_log_trace_enable" "0"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_debug" "0"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_disable" "1"
			write "/sys/module/ged/parameters/ged_monitor_3D_fence_systrace" "0"
			write "/sys/module/ged/parameters/ged_smart_boost" "1"
			write "/sys/module/ged/parameters/gpu_debug_enable" "0"
			write "/sys/module/ged/parameters/gpu_dvfs_enable" "1"
			write "/sys/module/ged/parameters/gx_3D_benchmark_on" "0"
			write "/sys/module/ged/parameters/gx_force_cpu_boost" "0"
			write "/sys/module/ged/parameters/gx_frc_mode" "0"
			write "/sys/module/ged/parameters/gx_game_mode" "0"
			write "/sys/module/ged/parameters/is_GED_KPI_enabled" "1"
			write "/sys/module/ged/parameters/boost_amp" "0"
			write "/sys/module/ged/parameters/gx_boost_on" "0"
			write "/sys/module/ged/parameters/gpu_idle" "100"
			write "/sys/module/ged/parameters/gpu_cust_boost_freq" "0"
		}

		[[ -d "/proc/gpufreq/" ]] && {
			write "/proc/gpufreq/gpufreq_opp_stress_test" "0"
			write "/proc/gpufreq/gpufreq_opp_freq" "0"
			write "/proc/gpufreq/gpufreq_input_boost" "0"
			write "/proc/gpufreq/gpufreq_limited_thermal_ignore" "0"
			write "/proc/gpufreq/gpufreq_limited_oc_ignore" "0"
			write "/proc/gpufreq/gpufreq_limited_low_batt_volume_ignore" "0"
			write "/proc/gpufreq/gpufreq_limited_low_batt_volt_ignore" "0"
		}

		[[ -d "/proc/mali/" ]] && {
			write "/proc/mali/dvfs_enable" "1"
			write "/proc/mali/always_on" "0"
		}
		echo "0" >"$gpu_tune"
	}
}

log_i "[*] Game Optimization Daemon - Improving your gaming experienceâ„¢
Version: 1.2.1-r2

[$(date +%T)]: [*] Game Optimization Logging started

[$(date +%T)]: [*] Game Optimization Daemon enables you to get the best performance out of your favorite games.
"

[[ ! -f "$gcfg" ]] && echo "# Game Optimization Daemon Config File
# Add given packages to the optimization list.
# List all the package names of the apps which you want to be optimized.
com.hg.wreckfest
org.ppsspp.ppsspp
org.citra.citra_emu
org.dolphinemu.dolphinemu
skyline.emu
" > "$gcfg"
echo "" > "$cpid"
echo "" >"$bbn_log"
echo "" >"$gpu_tune"

(
	while true; do
	sleep 60
	pid="$(pgrep -f "$list_unified" | head -1)"
	window="$(dumpsys window | grep -E 'mCurrentFocus|mFocusedApp' | $list_unified_filter | $line_row_filter)"
	game="$(pm list package | $package_filter | grep "$window")"
	[[ ! "$window" ]] && [[ "$(cat "$gpu_tune")" == "1" ]] && gpu_tune_default ||
	[[ "$pid" != "$(grep -E '[0-9]' "$cpid" | tail -1)" ]] && [[ "$window" ]] && echo "$pid" >>"$cpid" && {
			log_g "$game found, optimizing..."
			echo "" >>"$glog"
			[[ "$enable_notif" == "1" ]] && notif_start
			gameopt_apply
			[[ "$enable_gpu_tune" == "1" ]] && gpu_tune_apply
			log_g "Optimization done"
			echo "" >>"$glog"
			[[ "$enable_notif" == "1" ]] && notif_end
		} || continue
		done
) &